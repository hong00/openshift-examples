apiVersion: v1
kind: BuildConfig
metadata:
  name: apps-pipeline
  labels:
    app: jenkins-pipeline-example
    name: apps-pipeline
    template: application-template-sample-pipeline

spec:
  runPolicy: Serial
  strategy:
    type: JenkinsPipeline
    jenkinsPipelineStrategy:
      jenkinsfile: |-
        import jenkins.model.*
        jenkins = Jenkins.instance
        node('') {
          withEnv([
            'app_nameVar=apps',
            'dev_prj_nameVar=app-dev',
            'dev_pod_countVar=2',
            'qa_prj_nameVar=app-qa',
            'qa_pod_countVar=3'
                                ]){
          stage 'buildInDevelopment'
            openshiftBuild(namespace: env.dev_prj_nameVar , buildConfig: env.app_nameVar , showBuildLogs: 'true')
          stage 'deployInDevelopment'
            openshiftDeploy(namespace: env.dev_prj_nameVar , deploymentConfig: env.app_nameVar)
            openshiftScale(namespace: env.dev_prj_nameVar , deploymentConfig: env.app_nameVar , replicaCount: env.dev_pod_countVar)
          stage 'deployInQA'
            slackSend (color: '#FFFF00', message: " Application env.app_nameVar deployment into env.qa_prj_nameVar is needed")
            input 'Proceeed ?'
            openshiftTag(namespace: env.dev_prj_nameVar, sourceStream: env.app_nameVar, sourceTag: 'latest' , destinationStream: env.app_nameVar , destinationTag: 'promoteToQA')
            openshiftDeploy(namespace: env.qa_prj_nameVar , deploymentConfig: env.app_nameVar)
            openshiftScale(namespace: env.qa_prj_nameVar , deploymentConfig: env.app_nameVar , replicaCount: env.qa_pod_countVar)
          stage 'Completion Notification'
            slackSend (color: '#008000', message: " Application env.app_nameVar deployed into env.qa_prj_nameVar")
          }                                  
        }
  output:
  resources:
  postCommit:
